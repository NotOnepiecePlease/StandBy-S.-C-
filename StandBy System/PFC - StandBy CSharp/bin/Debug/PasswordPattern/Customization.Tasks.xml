<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Customization.Tasks</name>
    </assembly>
    <members>
        <member name="T:Customization.Tasks.ApiIntegrationSAPTasks.ApiSapCriarLoteControleTask">
            <summary>
            Classe utilizada para cadastrar Lotes de Controle pela ApiRest SAP
            </summary>
        </member>
        <member name="F:Customization.Tasks.ApiIntegrationSAPTasks.ApiSapCriarLoteControleTask.lotSAP">
            <summary>
            Entidade LoteControleSap que será cadastrada no SampleManager
            </summary>
        </member>
        <member name="F:Customization.Tasks.ApiIntegrationSAPTasks.ApiSapCriarLoteControleTask.form">
            <summary>
            Form LoteControleSAP
            </summary>
        </member>
        <member name="M:Customization.Tasks.ApiIntegrationSAPTasks.ApiSapCriarLoteControleTask.SetupTask">
            <summary>
            SetupTask override 
            </summary>
        </member>
        <member name="M:Customization.Tasks.ApiIntegrationSAPTasks.ApiSapCriarLoteControleTask.FormLoaded(System.Object,System.EventArgs)">
            <summary>
            Evento Loaded do FormLoteControleSap
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Customization.Tasks.ApiIntegrationSAPTasks.ApiSapCriarLoteControleTask.LoadSampleManagerEntry">
            <summary>
            Carrega entrada do SampleManager baseando no registro e na tabela.
            Se existir algo, a variável lotSap é preenchida com os dados existentes
            </summary>
        </member>
        <member name="M:Customization.Tasks.ApiIntegrationSAPTasks.ApiSapCriarLoteControleTask.LoadEntityInformation">
            <summary>
            Função utilizada para carregar os dados de lotSap caso não exista no SampleManager.
            </summary>
        </member>
        <member name="M:Customization.Tasks.ApiIntegrationSAPTasks.ApiSapCriarLoteControleTask.LoadForSample(Thermo.SampleManager.ObjectModel.Sample)">
            <summary>
            Função utilizada para carregas as informações na variável lotSap baseand na entidade de contexto Sample
            </summary>
            <param name="lot"></param>
        </member>
        <member name="M:Customization.Tasks.ApiIntegrationSAPTasks.ApiSapCriarLoteControleTask.LoadForJob(Thermo.SampleManager.ObjectModel.JobHeader)">
            <summary>
            Função utilizada para carregas as informações na variável lotSap baseand na entidade de contexto JobHeader
            </summary>
            <param name="lot"></param>
        </member>
        <member name="M:Customization.Tasks.ApiIntegrationSAPTasks.ApiSapCriarLoteControleTask.LoadForLot(Thermo.SampleManager.ObjectModel.LotDetails)">
            <summary>
            Função utilizada para carregas as informações na variável lotSap baseand na entidade de contexto LotDetails
            </summary>
            <param name="lot"></param>
        </member>
        <member name="M:Customization.Tasks.ApiIntegrationSAPTasks.ApiSapCriarLoteControleTask.BuildMessagesForForm">
            <summary>
            Função utilizada para apresentar mensagens de acordo com o status atual da lotSap
            </summary>
        </member>
        <member name="M:Customization.Tasks.ApiIntegrationSAPTasks.ApiSapCriarLoteControleTask.SetDisplayForm">
            <summary>
            Função utilizada para setar os campos do formulário como readonly
            </summary>
        </member>
        <member name="M:Customization.Tasks.ApiIntegrationSAPTasks.ApiSapCriarLoteControleTask.CheckForEmptyFields">
            <summary>
            Função utilizada para verificar os campos nulos ou vazios no formulário
            </summary>
            <returns>Retorna False caso algum dos campos do form esteja vazio</returns>
        </member>
        <member name="M:Customization.Tasks.ApiIntegrationSAPTasks.ApiSapCriarLoteControleTask.ApplyToSap(System.Object,System.EventArgs)">
            <summary>
            Evento de envio de informações para integração com Api SAP
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Customization.Tasks.ApiIntegrationSAPTasks.ApiSapCriarLoteControleTask.CloseForm(System.Object,System.EventArgs)">
            <summary>
            Evento de cancelamento de cadastro
            </summary>
            <returns></returns>
        </member>
        <member name="M:Customization.Tasks.ApiIntegrationSAPTasks.ApiSapCriarLoteControleTask.ProcessLot(Customization.Tasks.ApiIntegrationSAPTasks.ApiCriarLoteControle.Models.LoteControleModel)">
            <summary>
            Função utilizada para realizar o processamento da comunicação com Api SAP
            </summary>
            <param name="loteControleModel">Payload Request Api SAP LoteControleModel </param>
        </member>
        <member name="M:Customization.Tasks.ApiIntegrationSAPTasks.ApiSapCriarLoteControleTask.CancelEntry">
            <summary>
            Função de cancelamento da entrada no SampleManager.
            Se essa ação for efetuada, o usuário consegue criar uma nova entrada para a mesma entidade na LoteControleSAP e realizar a integração.
            </summary>
        </member>
        <member name="M:Customization.Tasks.ApiIntegrationSAPTasks.ApiSapCriarLoteControleTask.SaveEntrySampleManager">
            <summary>
            Função utilizada para salvar as informações de LotSap
            </summary>
        </member>
        <member name="T:Customization.Tasks.ApiIntegrationSAPTasks.ApiCriarLoteControle.Models.Input">
            <summary>
            Objeto recebido pelo objeto Api SAP
            </summary>
        </member>
        <member name="T:Customization.Tasks.ApiIntegrationSAPTasks.ApiCriarLoteControle.Models.Result">
            <summary>
            Objeto gerado pela API SAP
            </summary>
        </member>
        <member name="T:Customization.Tasks.ApiIntegrationSAPTasks.ApiSAPRequest">
            <summary>
            Api Genérica para efetuar requisições Aos SAP
            </summary>
        </member>
        <member name="M:Customization.Tasks.ApiIntegrationSAPTasks.ApiSAPRequest.MakeApiRequest``1(Thermo.SampleManager.Library.DesignerRuntime.StandardLibrary,System.Object,System.String,System.String)">
            <summary>
            Função para efetuar Requisição API SAP.
            </summary>
            <typeparam name="T">Modelo de resposta para a requisição</typeparam>
            <param name="library">Biblioteca StandardLibrary do SampleManager</param>
            <param name="data">Objeto que será enviado para api</param>
            <param name="uri">Endereço de rede da api</param>
            <param name="method">Método utilizado na requisição</param>
            <returns>Retorna o modelo recebido como parametro T</returns>
        </member>
        <member name="M:Customization.Tasks.ApiIntegrationSAPTasks.ApiSAPRequest.GetAuthenticationToken(Thermo.SampleManager.Library.DesignerRuntime.StandardLibrary)">
            <summary>
            Obter autenticação da api a partir de Itens de configuração
            </summary>
            <param name="library"></param>
            <returns>Retorna string com usuário e senha da API serializada em Base64</returns>
        </member>
        <member name="M:Customization.Tasks.ApiIntegrationSAPTasks.ApiSAPRequest.DeserializeObject``1(System.String)">
            <summary>
            Objeto de deserialização da resposta pela API
            </summary>
            <typeparam name="T">Objeto padrão recebido pela classe genérica</typeparam>
            <param name="response">Objeto em formato string</param>
            <returns>Retorna o objeto padrão recebido pela classe</returns>
        </member>
        <member name="T:Customization.Tasks.BackgroundTasks.InstrumentCheckExtended">
            <summary>
            Background task which updates the state of instruments and instrument parts
            </summary>
        </member>
        <member name="M:Customization.Tasks.BackgroundTasks.InstrumentCheckExtended.Launch">
            <summary>
            Launches this background task.
            </summary>
        </member>
        <member name="M:Customization.Tasks.BackgroundTasks.InstrumentCheckExtended.CheckMaintenance(Thermo.SampleManager.ObjectModel.Instrument)">
            <summary>
            Checks the maintenance.
            </summary>
            <param name="inst">The inst.</param>
        </member>
        <member name="M:Customization.Tasks.BackgroundTasks.InstrumentCheckExtended.CheckPartMaintenance(Thermo.SampleManager.ObjectModel.InstrumentPart)">
            <summary>
            Checks the part maintenance.
            </summary>
            <param name="instPart">The inst part.</param>
        </member>
        <member name="M:Customization.Tasks.BackgroundTasks.InstrumentCheckExtended.MailableUser(Thermo.SampleManager.Library.EntityDefinition.PersonnelBase)">
            <summary>
            Mailable user.
            </summary>
            <param name="oper">The oper.</param>
            <returns></returns>
        </member>
        <member name="M:Customization.Tasks.BackgroundTasks.InstrumentCheckExtended.MailResponsibleOperators">
            <summary>
            Mails the responsible operators.
            </summary>
        </member>
        <member name="M:Customization.Tasks.BackgroundTasks.InstrumentCheckExtended.MailToUser(Thermo.SampleManager.ObjectModel.Personnel)">
            <summary>
            Mails to user.
            </summary>
            <param name="oper">The oper.</param>
        </member>
        <member name="M:Customization.Tasks.BackgroundTasks.InstrumentCheckExtended.AddInstPartService(Thermo.SampleManager.Library.EntityDefinition.PersonnelBase,System.Text.StringBuilder)">
            <summary>
            Adds the inst part service.
            </summary>
            <param name="oper">The oper.</param>
            <param name="mailBody">The mail body.</param>
        </member>
        <member name="M:Customization.Tasks.BackgroundTasks.InstrumentCheckExtended.AddInstPartCalib(Thermo.SampleManager.Library.EntityDefinition.PersonnelBase,System.Text.StringBuilder)">
            <summary>
            Adds the inst part calib.
            </summary>
            <param name="oper">The oper.</param>
            <param name="mailBody">The mail body.</param>
        </member>
        <member name="M:Customization.Tasks.BackgroundTasks.InstrumentCheckExtended.AddInstService(Thermo.SampleManager.Library.EntityDefinition.PersonnelBase,System.Text.StringBuilder)">
            <summary>
            Adds the inst service.
            </summary>
            <param name="oper">The oper.</param>
            <param name="mailBody">The mail body.</param>
        </member>
        <member name="M:Customization.Tasks.BackgroundTasks.InstrumentCheckExtended.AddInstCalib(Thermo.SampleManager.Library.EntityDefinition.PersonnelBase,System.Text.StringBuilder)">
            <summary>
            Adds the inst calib.
            </summary>
            <param name="oper">The oper.</param>
            <param name="mailBody">The mail body.</param>
        </member>
        <member name="M:Customization.Tasks.BackgroundTasks.InstrumentCheckExtended.AddInstInCalib(Thermo.SampleManager.Library.EntityDefinition.PersonnelBase,System.Text.StringBuilder)">
            <summary>
            Adds the inst in calib.
            </summary>
            <param name="oper">The oper.</param>
            <param name="mailBody">The mail body.</param>
        </member>
        <member name="T:Customization.Tasks.BackgroundTasks.StockCheckTask">
            <summary>
            Background task which updates the state of stock batches
            </summary>
        </member>
        <member name="M:Customization.Tasks.BackgroundTasks.StockCheckTask.Launch">
            <summary>
            Launches this background task.
            </summary>
        </member>
        <member name="M:Customization.Tasks.BackgroundTasks.StockCheckTask.CheckBatch(Thermo.SampleManager.ObjectModel.StockBatch)">
            <summary>
            Checks the batch.
            </summary>
            <param name="stockBatch">The stock batch.</param>
        </member>
        <member name="M:Customization.Tasks.BackgroundTasks.StockCheckTask.CheckInventory(Thermo.SampleManager.ObjectModel.Stock)">
            <summary>
            Checks the inventory.
            </summary>
            <param name="stock">The stock.</param>
        </member>
        <member name="M:Customization.Tasks.BackgroundTasks.StockCheckTask.MailableUser(Thermo.SampleManager.Library.EntityDefinition.PersonnelBase)">
            <summary>
            Mailable user.
            </summary>
            <param name="oper">The oper.</param>
            <returns></returns>
        </member>
        <member name="M:Customization.Tasks.BackgroundTasks.StockCheckTask.MailResponsibleOperators">
            <summary>
            Mails the responsible operators.
            </summary>
        </member>
        <member name="M:Customization.Tasks.BackgroundTasks.StockCheckTask.MailToUser(Thermo.SampleManager.ObjectModel.Personnel)">
            <summary>
            Mails to user.
            </summary>
            <param name="oper">The oper.</param>
        </member>
        <member name="M:Customization.Tasks.BackgroundTasks.StockCheckTask.AddLowStock(Thermo.SampleManager.Library.EntityDefinition.PersonnelBase,System.Text.StringBuilder)">
            <summary>
            Adds the low stock.
            </summary>
            <param name="oper">The oper.</param>
            <param name="mailBody">The mail body.</param>
        </member>
        <member name="M:Customization.Tasks.BackgroundTasks.StockCheckTask.AddLowStockBatch(Thermo.SampleManager.Library.EntityDefinition.PersonnelBase,System.Text.StringBuilder)">
            <summary>
            Adds the low stock batch.
            </summary>
            <param name="oper">The oper.</param>
            <param name="mailBody">The mail body.</param>
        </member>
        <member name="M:Customization.Tasks.BackgroundTasks.StockCheckTask.AddWarnExpiryStockBatch(Thermo.SampleManager.Library.EntityDefinition.PersonnelBase,System.Text.StringBuilder)">
            <summary>
            Adds the warn expiry stock batch.
            </summary>
            <param name="oper">The oper.</param>
            <param name="mailBody">The mail body.</param>
        </member>
        <member name="M:Customization.Tasks.BackgroundTasks.StockCheckTask.AddExpiredStockBatch(Thermo.SampleManager.Library.EntityDefinition.PersonnelBase,System.Text.StringBuilder)">
            <summary>
            Adds the expired stock batch.
            </summary>
            <param name="oper">The oper.</param>
            <param name="mailBody">The mail body.</param>
        </member>
        <member name="T:Customization.Tasks.ExtendedStockBatchConsumptionTask">
            <summary>
            Implementation of STOCK Reconcile.
            </summary>
        </member>
        <member name="M:Customization.Tasks.ExtendedStockBatchConsumptionTask.MainFormLoaded">
            <summary>
            Called when the <see cref="P:Thermo.SampleManager.Tasks.DefaultFormTask.MainForm" /> has been loaded.
            </summary>
        </member>
        <member name="M:Customization.Tasks.ExtendedStockBatchConsumptionTask.Adjustment_NumberChanged(System.Object,Thermo.SampleManager.Library.ClientControls.RealChangedEventArgs)">
            <summary>
            Handles the NumberChanged event of the Adjustment control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="!:Library.ClientControls.RealChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Customization.Tasks.ExtendedStockBatchConsumptionTask.OnPreSave">
            <summary>
            Handles the Closing event of the Stock Batch Stock Take Form.
            Set the return value to return the entity if the OK button was pressed.
            </summary>
        </member>
        <member name="T:Customization.Tasks.FormsCustomizados.BoletimConformidadeTask">
            <summary>
            Implementation of stocks.
            </summary>
        </member>
        <member name="M:Customization.Tasks.FormsCustomizados.BoletimConformidadeTask.MainFormCreated">
            <summary>
            Called when the <see cref="P:Thermo.SampleManager.Tasks.GenericLabtableTask.MainForm"/> has been created.
            </summary>
        </member>
        <member name="T:Customization.Tasks.FormsCustomizados.StockSplitBatch2Task">
            <summary>
            Implementation of STOCK BATCH SPLIT.
            </summary>
        </member>
        <member name="M:Customization.Tasks.FormsCustomizados.StockSplitBatch2Task.MainFormLoaded">
            <summary>
            Handles the Loaded event of the Stock Batch Split Form.
            </summary>
        </member>
        <member name="M:Customization.Tasks.FormsCustomizados.StockSplitBatch2Task.OnPreSave">
            <summary>
            Handles the Closing event of the Stock Batch Split Form.
            </summary>
        </member>
        <member name="M:Customization.Tasks.FormsCustomizados.StockSplitBatch2Task.AddToBatchChanged(System.Object,Thermo.SampleManager.Library.ClientControls.CheckedChangedEventArgs)">
            <summary>
            Handles the Closing event of the Stock Batch Split Form.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Customization.Tasks.FormsCustomizados.StockSplitBatch2Task.CreateRemovalRecord(System.Double,System.String)">
            <summary>
            Creates the removal record.
            </summary>
            <param name="amount">The amount.</param>
            <param name="unit">The unit.</param>
        </member>
        <member name="M:Customization.Tasks.FormsCustomizados.StockSplitBatch2Task.CreateAdditionRecord(System.Double,System.String,Thermo.SampleManager.Common.Data.IEntity)">
            <summary>
            Creates the addition record.
            </summary>
            <param name="amount">The amount.</param>
            <param name="unit">The unit.</param>
            <param name="batch">The batch.</param>
        </member>
        <member name="M:Customization.Tasks.FormsCustomizados.StockSplitBatch2Task.CreateNewStockBatch(System.Double,System.String)">
            <summary>
            Creates the new stock batch.
            </summary>
            <param name="amount">The amount.</param>
            <param name="unit">The unit.</param>
        </member>
        <member name="T:Customization.Tasks.PerformanceDashTask">
            <summary>
            Class to implement the performance dashboard
            </summary>
        </member>
        <member name="M:Customization.Tasks.PerformanceDashTask.TaskParametersRefreshed">
            <summary>
            Called when the task parametes and Context object have been refreshed.
            </summary>
        </member>
        <member name="M:Customization.Tasks.PerformanceDashTask.MainFormCreated">
            <summary>
            Called when the <see cref="P:Thermo.SampleManager.Tasks.DefaultFormTask.MainForm"/> has been created.
            </summary>
        </member>
        <member name="M:Customization.Tasks.PerformanceDashTask.MainFormLoaded">
            <summary>
            Called when the <see cref="P:Thermo.SampleManager.Tasks.DefaultFormTask.MainForm"/> has been loaded.
            </summary>
        </member>
        <member name="M:Customization.Tasks.PerformanceDashTask.SettingsFormLoaded(System.Object,System.EventArgs)">
            <summary>
            Handles the Loaded event of the m_settingsForm control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Customization.Tasks.PerformanceDashTask.SettingsFormClosed(System.Object,System.EventArgs)">
            <summary>
            Handles the Closed event of the m_settingsForm control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Customization.Tasks.PerformanceDashTask.ButtonSettingsClick(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the ButtonSettings control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Customization.Tasks.PerformanceDashTask.ReadSettings">
            <summary>
            Reads the settings.
            </summary>
        </member>
        <member name="M:Customization.Tasks.PerformanceDashTask.ChartOnTimePointClicked(System.Object,Thermo.SampleManager.Library.ClientControls.ChartSeriesPointClickedEventArgs)">
            <summary>
            Handles the PointClicked event of the m_ChartOnTime control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Thermo.SampleManager.Library.ClientControls.ChartSeriesPointClickedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Customization.Tasks.PerformanceDashTask.ChartStatusPointClicked(System.Object,Thermo.SampleManager.Library.ClientControls.ChartSeriesPointClickedEventArgs)">
            <summary>
            Handles the PointClicked event of the m_ChartStatus control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Thermo.SampleManager.Library.ClientControls.ChartSeriesPointClickedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Customization.Tasks.PerformanceDashTask.BuildQueryOfSelectedPie(Thermo.SampleManager.Common.Data.IQuery,System.Collections.ArrayList)">
            <summary>
            Builds the query of selected pie chart.
            </summary>
            <param name="querySamples">The query samples.</param>
            <param name="queries">The queries.</param>
            <returns></returns>
        </member>
        <member name="M:Customization.Tasks.PerformanceDashTask.GetPhraseIdFrom(System.String,System.String)">
            <summary>
            Gets the phrase id from.
            </summary>
            <param name="type">The type.</param>
            <param name="phraseText">The phrase text.</param>
            <returns></returns>
        </member>
        <member name="M:Customization.Tasks.PerformanceDashTask.GetPhraseFrom(System.String,System.String)">
            <summary>
            Gets the phrase id from.
            </summary>
            <param name="type">The type.</param>
            <param name="phraseText">The phrase text.</param>
            <returns></returns>
        </member>
        <member name="M:Customization.Tasks.PerformanceDashTask.PopulateCharts">
            <summary>
            Populates the charts.
            </summary>
        </member>
        <member name="M:Customization.Tasks.PerformanceDashTask.PopulateSampleStatusChart(Thermo.SampleManager.Common.Data.IQuery)">
            <summary>
            Populates the sample status chart.
            </summary>
            <param name="querySamples">The query samples.</param>
        </member>
        <member name="M:Customization.Tasks.PerformanceDashTask.PopulateOnTimeChart(Thermo.SampleManager.Common.Data.IQuery)">
            <summary>
            Populates the on time chart.
            </summary>
            <param name="querySamples">The query samples.</param>
        </member>
        <member name="M:Customization.Tasks.PerformanceDashTask.PopulateProcessChart(Thermo.SampleManager.Common.Data.IQuery)">
            <summary>
            Populates the process chart.
            </summary>
            <param name="querySamples">The query samples.</param>
        </member>
        <member name="M:Customization.Tasks.PerformanceDashTask.PopulatePerformanceChart(Thermo.SampleManager.Common.Data.IQuery)">
            <summary>
            Populates the performance chart.
            </summary>
            <param name="querySamples">The query samples.</param>
        </member>
        <member name="M:Customization.Tasks.PerformanceDashTask.CalculateOnTime(Thermo.SampleManager.Common.Data.IQuery)">
            <summary>
            Calculates the on time.
            </summary>
            <param name="querySamples">The query samples.</param>
            <returns></returns>
        </member>
        <member name="M:Customization.Tasks.PerformanceDashTask.CountSamplesBetweenIntervals(System.Int32,System.Int32,Thermo.SampleManager.Common.Data.IQuery,System.Boolean,System.Boolean)">
            <summary>
            Counts the samples between intervals.
            </summary>
            <param name="daysInterval">The days interval.</param>
            <param name="prevInterval">The prev interval.</param>
            <param name="querySamples">The query samples.</param>
            <param name="first">if set to <c>true</c> [first].</param>
            <param name="last">if set to <c>true</c> [last].</param>
            <returns></returns>
        </member>
        <member name="M:Customization.Tasks.PerformanceDashTask.CalculateIntervals(Thermo.SampleManager.Common.Data.IQuery)">
            <summary>
            Calculates the intervals.
            </summary>
            <param name="querySamples">The query samples.</param>
            <returns></returns>
        </member>
        <member name="M:Customization.Tasks.PerformanceDashTask.BuildQueryOfPerformance(System.DateTime,System.Double,Thermo.SampleManager.Common.Data.IQuery)">
            <summary>
            Builds the query of performance.
            </summary>
            <param name="dateFrom">The date from.</param>
            <param name="interval">The interval.</param>
            <param name="query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:Customization.Tasks.PerformanceDashTask.BuildSampleByStatusQuery(Thermo.SampleManager.Common.Data.IQuery,System.String)">
            <summary>
            Builds the sample by status query.
            </summary>
            <param name="query">The query.</param>
            <param name="status">The status.</param>
            <returns></returns>
        </member>
        <member name="P:Customization.Tasks.PortalBRTasks.ApiRestObjectModel.ResponseResultEntryModel.Status">
            <summary>
            Gets or sets the test number.
            </summary>
            <value>
            The test number.
            </value>
        </member>
        <member name="P:Customization.Tasks.PortalBRTasks.ApiRestObjectModel.ResponseResultEntryModel.Message">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Customization.Tasks.PortalBRTasks.ApiRestObjectModel.ResponseResultEntryModel.Count">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="T:Customization.Tasks.PortalBRTasks.ApiRestObjectModel.RestTemplateLogin">
            <summary>
            Classe para armazenar os dados do login do usuário
            </summary>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestObjectModel.RestTemplateLogin.#ctor">
            <summary>
            Construtor padrão
            </summary>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestObjectModel.RestTemplateLogin.#ctor(Thermo.SampleManager.Library.EntityDefinition.WorkflowBase)">
            <summary>
            Costrutor baseado no workflows
            </summary>
            <param name="workflow"></param>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestObjectModel.RestTemplateLogin.Create(Thermo.SampleManager.Library.EntityDefinition.WorkflowBase)">
            <summary>
            Construtor estático  para facilitar na chamada do objeto
            </summary>
            <param name="workflow"></param>
            <returns></returns>
        </member>
        <member name="T:Customization.Tasks.PortalBRTasks.ApiRestObjectModel.RestTemplateLoginField">
            <summary>
            Classe para armazenar os campos do template
            </summary>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestObjectModel.RestTemplateLoginField.#ctor(Thermo.SampleManager.ObjectModel.EntityTemplateProperty)">
            <summary>
            Contrutor baseado no EntityTemplateProperty
            </summary>
            <param name="template"></param>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestObjectModel.RestTemplateLoginField.Create(Thermo.SampleManager.ObjectModel.EntityTemplateProperty)">
            <summary>
            Construtor estático  para facilitar na chamada do objeto
            </summary>
            <param name="workflow"></param>
            <returns></returns>
        </member>
        <member name="T:Customization.Tasks.PortalBRTasks.ApiRestObjectModel.ResultValue">
            <summary>
            Result Value
            </summary>
        </member>
        <member name="P:Customization.Tasks.PortalBRTasks.ApiRestObjectModel.ResultValue.TestNumber">
            <summary>
            Gets or sets the test number.
            </summary>
            <value>
            The test number.
            </value>
        </member>
        <member name="P:Customization.Tasks.PortalBRTasks.ApiRestObjectModel.ResultValue.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Customization.Tasks.PortalBRTasks.ApiRestObjectModel.ResultValue.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Library.ConcatObject.create(Customization.Tasks.PortalBRTasks.ApiRestObjectModel.RestTemplateLogin,Thermo.SampleManager.Common.Data.IEntity)">
            <summary>
            Iniciar o método de forma estática
            </summary>
            <param name="restlogin"> Classe do tipo RestTemplateLogin</param>
            <param name="iEntity"> IEntity do registro gerado pelo RestTemplateLogin</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Customization.Tasks.PortalBRTasks.ApiRestTasks.Library.EnvironmentRest" -->
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Library.EnvironmentRest.ObjectIsNull(System.Object)">
            <summary>
            Verificarse um objeto e bulo
            </summary>
            <param name="objectNull">Objeto para ser avaliado</param>
            <returns>Verdadeiro ou falso</returns>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Library.EnvironmentRest.setValueDate(System.DateTime)">
            <summary>
            Formatar data
            </summary>
            <param name="date"> Data a ser formatada</param>
            <returns>Data formatada</returns>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Library.EnvironmentRest.IEntityCollectionRest(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Library.EnvironmentRest.IEntityCollectionRest(System.IServiceProvider)"/> class.
            </summary>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="T:Customization.Tasks.PortalBRTasks.ApiRestTasks.Library.IEntityLibraryRest">
             <summary>
            **********************************************************************************************
            *
            * Module Name   	: IEntityLibraryRest
            *
             Purpose           : Manipular objeto populando as informações.
            *
            * Document Ref.     :     
             *
             * Author            : Leonardo Ribeiro - LRS
             *
             * (c) Copyright 2020  Interfusão.
             **********************************************************************************************
            * instructions for use: Chamar o método    LibraryRest.get() e a opção desejada
             *
            **********************************************************************************************
             </summary>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Library.IEntityLibraryRest.setValueClassEntity(Customization.Tasks.PortalBRTasks.ApiRestObjectModel.RestTemplateLogin,Thermo.SampleManager.Common.Data.IEntity)">
            <summary>
            Setar os balores dos objetos na classe RestTemplateLogin
            </summary>
            <param name="templateLogin">Template logim</param>
            <param name="iEntity">Objeto a ser copiado os dados</param>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Library.IEntityLibraryRest.setValueLotDetails(Customization.Tasks.PortalBRTasks.ApiRestObjectModel.RestTemplateLogin,Thermo.SampleManager.ObjectModel.LotDetails)">
            <summary>
            Atribuir os valores quando a classe for do tipo LOT
            </summary>
            <param name="templateLogin">Template logim</param>
            <param name="lot">Classe com os dados do tipo lot</param>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Library.IEntityLibraryRest.setValueTest(Customization.Tasks.PortalBRTasks.ApiRestObjectModel.RestTemplateLogin,Thermo.SampleManager.ObjectModel.Test)">
            <summary>
            Atribuir os valores quando a classe for do tipo Test
            </summary>
            <param name="templateLogin">Template logim</param>
            <param name="lot">Classe com os dados do tipo test</param>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Library.IEntityLibraryRest.setValueResult(Customization.Tasks.PortalBRTasks.ApiRestObjectModel.RestTemplateLogin,Thermo.SampleManager.ObjectModel.Result)">
            <summary>
            Atribuir os valores quando a classe for do tipo Result
            </summary>
            <param name="templateLogin">Template logim</param>
            <param name="res">Classe com os dados do tipo Result</param>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Library.IEntityLibraryRest.setValueSample(Customization.Tasks.PortalBRTasks.ApiRestObjectModel.RestTemplateLogin,Thermo.SampleManager.ObjectModel.Sample)">
            <summary>
            Atribuir os valores quando a classe for do tipo Sample
            </summary>
            <param name="templateLogin">Template logim</param>
            /// <param name="res">Classe com os dados do tipo Sample</param>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Library.IEntityLibraryRest.setValueJobHeader(Customization.Tasks.PortalBRTasks.ApiRestObjectModel.RestTemplateLogin,Thermo.SampleManager.ObjectModel.JobHeader)">
            <summary>
            Atribuir os valores quando a classe for do tipo JobHeader
            </summary>
            <param name="templateLogin">Template logim</param>
            /// <param name="res">Classe com os dados do tipo JobHeader</param>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Library.IEntityLibraryRest.getTemplateLogin(Thermo.SampleManager.Library.EntityDefinition.WorkflowBase,Customization.Tasks.PortalBRTasks.ApiRestTasks.Data.IEntityCollectionRest)">
            <summary>
            Selecionar o TemplateLogin Baseado no identity do workflow
            </summary>
            <param name="workflow">Workflow do tipo Login</param>
            <param name="m_EntityClassCollection">Classe para manipulação dos objetos do SM</param>
            <returns>TemplateLogim sem os dados do registro</returns>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Library.IEntityLibraryRest.getTemplateLogin(Thermo.SampleManager.Common.Data.IEntity,Customization.Tasks.PortalBRTasks.ApiRestTasks.Data.IEntityCollectionRest)">
            <summary>
            Selecionar o template logim e preencher com os valore dos objeto enviado, pode ser Lot, job, ou sample
            </summary>
            <param name="m_EntityClassCollection">Classe para manipulação dos objetos do SM</param>
            <returns>TemplateLogim com os dados do registro referente a da campo do entity template</returns>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Library.IEntityLibraryRest.setLotDetails(System.String,Customization.Tasks.PortalBRTasks.ApiRestTasks.Data.IEntityCollectionRest)">
            <summary>
            Popular o objeto TemplateLogin baseado no id do LOT; 
            </summary>
            <param name="lotId">Identity da table LotDetails ex:lotDetails.LotId </param>
            <param name="m_EntityClassCollection"></param>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Library.IEntityLibraryRest.setJobHeader(Customization.Tasks.PortalBRTasks.ApiRestObjectModel.RestTemplateLogin,Customization.Tasks.PortalBRTasks.ApiRestTasks.Data.IEntityCollectionRest)">
            <summary>
            Popular o objeto TemplateLogin baseado no LotDetails ; 
            </summary>
            <param name="lote">Classe dos registro LOTE</param>
            <param name="m_EntityClassCollection"></param>        
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Library.IEntityLibraryRest.setSample(Customization.Tasks.PortalBRTasks.ApiRestObjectModel.RestTemplateLogin,Customization.Tasks.PortalBRTasks.ApiRestTasks.Data.IEntityCollectionRest)">
            <summary>
            Popular o objeto TemplateLogin baseado no LotDetails ; 
            </summary>
            <param name="lote">Classe dos registro LOTE</param>
            <param name="m_EntityClassCollection"></param>        
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Library.IEntityLibraryRest.setTest(Customization.Tasks.PortalBRTasks.ApiRestObjectModel.RestTemplateLogin,Thermo.SampleManager.ObjectModel.Sample,Customization.Tasks.PortalBRTasks.ApiRestTasks.Data.IEntityCollectionRest)">
            <summary>
            Popular o testes na sample ; 
            </summary>
            <param name="lote">Classe dos registro LOTE</param>
            <param name="m_EntityClassCollection"></param>        
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Library.IEntityLibraryRest.setResult(Customization.Tasks.PortalBRTasks.ApiRestObjectModel.RestTemplateLogin,Thermo.SampleManager.Library.EntityDefinition.TestBase,Customization.Tasks.PortalBRTasks.ApiRestTasks.Data.IEntityCollectionRest)">
            <summary>
            Popular os resultados da tabela test 
            </summary>
            <param name="teste">Classe dos registro do teste</param>
            <param name="m_EntityClassCollection"></param>        
        </member>
        <!-- Badly formed XML comment ignored for member "T:Customization.Tasks.PortalBRTasks.ApiRestTasks.Library.LibraryBaseRest" -->
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Library.LibraryBaseRest.#ctor(Customization.Tasks.PortalBRTasks.ApiRestTasks.Utility.LibraryRest)">
            <summary>
            Intermedia a intregação das classes
            </summary>
            <param name="libraryITF"> Classe do tipo LibraryRest </param>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Data.IEntityCollectionRest.#ctor(System.IServiceProvider,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Customization.Tasks.PortalBRTasks.ApiRestTasks.Data.IEntityCollectionRest"/> class.
            </summary>
            <param name="serviceProvider">The service provider. Library</param>
            <param name="mode">Modo de edição ou vizualização</param>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Data.IEntityCollectionRest.getEntity(System.String,System.String,System.String)">
            <summary>
            Retorna as tabelas do sistema de forma Genérica
            </summary>
            <param name="Identity">  ID do registro</param>
            <param name="TableName">Nome da tabela</param>
            <param name="nameField">nome do campo a ser utilizado no filtro</param>
            <returns>IEntityCollection de acordo com os critérios informados</returns>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Data.IEntityCollectionRest.getPhrase(System.String,System.String)">
            <summary>
            Retorna as phrase de uma tabela
            </summary>
            <param name="phraseType">  ID do registro</param>
            <param name="phraseId">Nome da tabela</param>
            <returns>IEntity de acordo com os critérios informados</returns>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Data.IEntityCollectionRest.SelectLatestVersion(System.String,System.String,System.String)">
            <summary>
            Retorna as tabelas do sistema de forma Genérica
            </summary>
            <param name="Identity">  ID do registro</param>
            <param name="TableName">Nome da tabela</param>
            <param name="nameField">nome do campo a ser utilizado no filtro</param>
            <returns>IEntityCollection de acordo com os critérios informados</returns>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Data.IEntityCollectionRest.getWorkflowLogin(System.String)">
            <summary>
            Retorna as tabelas do sistema de forma Genérica
            </summary>
            <param name="Identity">  ID do registro</param>
            <returns>IEntityCollection de acordo com os critérios informados</returns>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Data.IEntityCollectionRest.getLot(Customization.Tasks.PortalBRTasks.ApiRestObjectModel.RestFilter)">
            <summary>
            Retorna a entidade lote baseado nos critérios de filtro informado pelo usuário
            </summary>
            <param name="filters">  Json do filtro</param>
            <returns>IEntityCollection de acordo com os critérios informados</returns>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Data.IEntityCollectionRest.addEnd(Thermo.SampleManager.Common.Data.IQuery,System.Int32)">
            <summary>
            Adicionar end quando necessário
            </summary>
            <param name="sql">IQuery atual</param>
            <param name="cont">Número de vezes que foi adicionado a condição</param>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Data.IEntityCollectionRest.getWorkflow">
            <summary>
            Retornar a lista de workflow baseado do tipo informado pelo usuário
            </summary>
            <param name="tipo"> Tipo do workflow </param>
            <returns> IEntityCollection de acordo com os critérios informados </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Data.IEntityCollectionRest.getEntityTemplateProperty(System.String,System.String)" -->
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Data.IEntityCollectionRest.getEntityCriteria(System.String)">
            <summary>
            Retornar  IEntityCollection identiry do criterios
            </summary>
            <param name="criteria"> Idenity</param>
            <returns>IEntityCollection de acordo com os critérios informados</returns>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.ReportsGOPApiTask.ReportBoletimConformidade(Customization.Tasks.PortalBRTasks.ApiRestObjectModel.BoletimConformidadeModel)">
            <summary>
            Método gerar boletins de conformidade.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.ReportsGOPApiTask.GetJobsByBase(System.String)">
            <summary>
            Método para buscar jobs no boletim de conformidade
            </summary>
            <returns></returns>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.ReportsGOPApiTask.ReportCertificadoAnalise(Customization.Tasks.PortalBRTasks.ApiRestObjectModel.CertificadoAnalisesModel)">
            <summary>
            Método para gerar certificado de análises.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.SampleApiTask.CalculateSampleValues(System.String)">
            <summary>
            Método gerar boletins de conformidade.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.UserApiTasks.GetUserRoleByIdentity(System.String)">
            <summary>
            Método gerar boletins de conformidade.
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Customization.Tasks.PortalBRTasks.ApiRestTasks.Utility.FieldType" -->
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Utility.FieldType.getType(System.String)">
            <summary>
            Determinar os tipo de dados configurados no structure
            </summary>
            <param name="DataType"> Tipo dos dados</param>
            <returns></returns>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Utility.SchemaFieldRest.#ctor(Customization.Tasks.PortalBRTasks.ApiRestTasks.Data.IEntityCollectionRest)">
            <summary>
            Initializes a new instance of the <see cref="T:Customization.Tasks.PortalBRTasks.ApiRestTasks.Utility.SchemaFieldRest"/> class.
            </summary>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Utility.SchemaFieldRest.getFildType(Customization.Tasks.PortalBRTasks.ApiRestObjectModel.RestTemplateLoginField,System.String,Thermo.SampleManager.ObjectModel.EntityTemplateProperty)">
            <summary>
            Atualizar informações referen ao tipo do campo de cada template
            </summary>
            <param name="templateLoginField"> Nome dos campso</param>
            <param name="entityName">Nome da tabela</param>
            <param name="entityTemplateProperty">Dados da tabela do entity template</param>
            <returns></returns>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Utility.SchemaFieldRest.addOptionsPhrase(Customization.Tasks.PortalBRTasks.ApiRestObjectModel.RestTemplateLoginField,System.String)">
            <summary>
            Adicionar lista de opções da tabela de frases
            </summary>
            <param name="templateLoginField"> Nome dos campso</param>
            <param name="phraseID">Identificação das frases</param>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Utility.SchemaFieldRest.addEntityCriteria(Customization.Tasks.PortalBRTasks.ApiRestObjectModel.RestTemplateLoginField,System.String,Thermo.SampleManager.ObjectModel.EntityTemplateProperty)">
            <summary>
            Adicionar lista de opções baseadas em critérios das frases
            </summary>
            <param name="templateLoginField"> Nome dos campos</param>
            <param name="tableName">Nome da tabela</param>
            <param name="entityTemplateProperty">Dados da tabela do entity template</param>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.Utility.SchemaFieldRest.addEntity(Customization.Tasks.PortalBRTasks.ApiRestObjectModel.RestTemplateLoginField,System.String)">
            <summary>
            Adiconar lista de opções baseado nas tabelas
            </summary>
            <param name="templateLoginField"> Nome dos campos</param>
            <param name="tableName">Nome da tabela</param>
        </member>
        <member name="T:Customization.Tasks.PortalBRTasks.ApiRestTasks.VsbApi">
            <summary>
            API VSB
            </summary>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.VsbApi.getTempate">
            <summary>
            Retornar os modelos de workflows disponiveis por tipo.
            </summary>
            <param name="classificacao">Classificação do tipo de workflow</param>
            <returns></returns>
        </member>
        <member name="M:Customization.Tasks.PortalBRTasks.ApiRestTasks.VsbApi.loginWorkflow(Customization.Tasks.PortalBRTasks.ApiRestObjectModel.RestTemplateLogin)">
            <summary>
            Retornar os modelos de workflows disponiveis por tipo.
            </summary>
            <param name="classificacao">Classificação do tipo de workflow</param>
            <returns></returns>
        </member>
        <member name="T:Customization.Tasks.ResourceManagementDashTask">
            <summary>
            Class to implement the resource management dashboard
            </summary>
        </member>
        <member name="M:Customization.Tasks.ResourceManagementDashTask.TaskParametersRefreshed">
            <summary>
            Called when the task parametes and Context object have been refreshed.
            </summary>
        </member>
        <member name="M:Customization.Tasks.ResourceManagementDashTask.MainFormCreated">
            <summary>
            Called when the <see cref="P:Thermo.SampleManager.Tasks.DefaultFormTask.MainForm"/> has been created.
            </summary>
        </member>
        <member name="M:Customization.Tasks.ResourceManagementDashTask.MainFormLoaded">
            <summary>
            Called when the <see cref="P:Thermo.SampleManager.Tasks.DefaultFormTask.MainForm"/> has been loaded.
            </summary>
        </member>
        <member name="M:Customization.Tasks.ResourceManagementDashTask.ButtonToggle3D_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the ButtonToggle3D control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Customization.Tasks.ResourceManagementDashTask.ClearCharts">
            <summary>
            Clears the charts.
            </summary>
        </member>
        <member name="M:Customization.Tasks.ResourceManagementDashTask.m_ChartOperator_PointClicked(System.Object,Thermo.SampleManager.Library.ClientControls.XYChartSeriesPointClickedEventArgs)">
            <summary>
            Handles the PointClicked event of the m_ChartOperator control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Thermo.SampleManager.Library.ClientControls.XYChartSeriesPointClickedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Customization.Tasks.ResourceManagementDashTask.m_ChartInstrument_PointClicked(System.Object,Thermo.SampleManager.Library.ClientControls.XYChartSeriesPointClickedEventArgs)">
            <summary>
            Handles the PointClicked event of the m_ChartInstrument control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Thermo.SampleManager.Library.ClientControls.XYChartSeriesPointClickedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Customization.Tasks.ResourceManagementDashTask.m_ChartStockAvail_PointClicked(System.Object,Thermo.SampleManager.Library.ClientControls.ChartSeriesPointClickedEventArgs)">
            <summary>
            Handles the PointClicked event of the m_ChartStockAvail control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Thermo.SampleManager.Library.ClientControls.ChartSeriesPointClickedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Customization.Tasks.ResourceManagementDashTask.GetBatchList">
            <summary>
            Gets the batch list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Customization.Tasks.ResourceManagementDashTask.GetOperatorList">
            <summary>
            Gets the operator list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Customization.Tasks.ResourceManagementDashTask.GetInstrumentList">
            <summary>
            Gets the instrument list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Customization.Tasks.ResourceManagementDashTask.SelectAssignedCount(Thermo.SampleManager.ObjectModel.Instrument)">
            <summary>
            Selects the assigned count.
            </summary>
            <param name="instrument">The instrument.</param>
            <returns></returns>
        </member>
        <member name="M:Customization.Tasks.ResourceManagementDashTask.SelectAssignedCount(Thermo.SampleManager.ObjectModel.Personnel)">
            <summary>
            Selects the assigned count.
            </summary>
            <param name="personnel">The personnel.</param>
            <returns></returns>
        </member>
        <member name="M:Customization.Tasks.ResourceManagementDashTask.GetBatchStatus(Thermo.SampleManager.ObjectModel.StockBatch)">
            <summary>
            Gets the batch status.
            </summary>
            <param name="batch">The batch.</param>
            <returns></returns>
        </member>
        <member name="M:Customization.Tasks.ResourceManagementDashTask.BuildChartStockAvail">
            <summary>
            Builds the chart stock avail.
            </summary>
        </member>
        <member name="M:Customization.Tasks.ResourceManagementDashTask.BuildChartInstrument">
            <summary>
            Create the assigned by instrument chart
            </summary>
        </member>
        <member name="M:Customization.Tasks.ResourceManagementDashTask.BuildChartOperator">
            <summary>
            Create the assigned by instrument chart
            </summary>
        </member>
        <member name="T:Customization.Tasks.SampleViewerTask">
            <summary>
            Class to implement the Sample Viewer task
            </summary>
        </member>
        <member name="M:Customization.Tasks.SampleViewerTask.TaskParametersRefreshed">
            <summary>
            Called when the task parametes and Context object have been refreshed.
            </summary>
        </member>
        <member name="M:Customization.Tasks.SampleViewerTask.MainFormCreated">
            <summary>
            Called when the <see cref="P:Thermo.SampleManager.Tasks.DefaultFormTask.MainForm"/> has been created.
            </summary>
        </member>
        <member name="M:Customization.Tasks.SampleViewerTask.MainFormLoaded">
            <summary>
            Called when the <see cref="P:Thermo.SampleManager.Tasks.DefaultFormTask.MainForm"/> has been loaded.
            </summary>
        </member>
        <member name="M:Customization.Tasks.SampleViewerTask.Results_FocusedColumnChanged(System.Object,Thermo.SampleManager.Library.ClientControls.UnboundGridFocusedColumnChangedEventArgs)">
            <summary>
            Handles the FocusedColumnChanged event of the Results control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Thermo.SampleManager.Library.ClientControls.UnboundGridFocusedColumnChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Customization.Tasks.SampleViewerTask.Results_FocusedRowChanged(System.Object,Thermo.SampleManager.Library.ClientControls.UnboundGridFocusedRowChangedEventArgs)">
            <summary>
            Handles the FocusedRowChanged event of the Results control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Thermo.SampleManager.Library.ClientControls.UnboundGridFocusedRowChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Customization.Tasks.SampleViewerTask.DrawGraph">
            <summary>
            Draws the graph.
            </summary>
        </member>
        <member name="M:Customization.Tasks.SampleViewerTask.AddChartSeries(Thermo.SampleManager.Library.ClientControls.XYChart,Thermo.SampleManager.ObjectModel.VersionedComponent)">
            <summary>
            Adds the chart series.
            </summary>
            <param name="chart">The chart.</param>
            <param name="component">The component.</param>
        </member>
        <member name="M:Customization.Tasks.SampleViewerTask.PopulateGrid">
            <summary>
            Populates the grid.
            </summary>
        </member>
        <member name="M:Customization.Tasks.SampleViewerTask.AddSubsamples(Thermo.SampleManager.Common.Data.IEntityCollection,Thermo.SampleManager.ObjectModel.Sample)">
            <summary>
            Gets the subsamples.
            </summary>
            <param name="samples">The samples.</param>
            <param name="selectedSample">The selected sample.</param>
        </member>
        <member name="T:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.LIMS_BuscarLoteControle_OB_SyncService">
            <remarks/>
        </member>
        <member name="M:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.LIMS_BuscarLoteControle_OB_SyncService.#ctor">
            <remarks/>
        </member>
        <member name="E:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.LIMS_BuscarLoteControle_OB_SyncService.LIMS_BuscarLoteControle_OB_SyncCompleted">
            <remarks/>
        </member>
        <member name="M:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.LIMS_BuscarLoteControle_OB_SyncService.LIMS_BuscarLoteControle_OB_Sync(Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_Request)">
            <remarks/>
        </member>
        <member name="M:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.LIMS_BuscarLoteControle_OB_SyncService.LIMS_BuscarLoteControle_OB_SyncAsync(Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_Request)">
            <remarks/>
        </member>
        <member name="M:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.LIMS_BuscarLoteControle_OB_SyncService.LIMS_BuscarLoteControle_OB_SyncAsync(Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_Request,System.Object)">
            <remarks/>
        </member>
        <member name="M:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.LIMS_BuscarLoteControle_OB_SyncService.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="T:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_Request">
            <remarks/>
        </member>
        <member name="P:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_Request.DataInicio">
            <remarks/>
        </member>
        <member name="P:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_Request.DataFim">
            <remarks/>
        </member>
        <member name="P:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_Request.Centro">
            <remarks/>
        </member>
        <member name="P:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_Request.Material">
            <remarks/>
        </member>
        <member name="T:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_ResponseBuscarLoteControle_Result">
            <remarks/>
        </member>
        <member name="P:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_ResponseBuscarLoteControle_Result.LoteControle">
            <remarks/>
        </member>
        <member name="P:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_ResponseBuscarLoteControle_Result.Centro">
            <remarks/>
        </member>
        <member name="P:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_ResponseBuscarLoteControle_Result.TipoControle">
            <remarks/>
        </member>
        <member name="P:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_ResponseBuscarLoteControle_Result.OrigemLoteControle">
            <remarks/>
        </member>
        <member name="P:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_ResponseBuscarLoteControle_Result.DataCriacaoLote">
            <remarks/>
        </member>
        <member name="P:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_ResponseBuscarLoteControle_Result.DataCriacaoLoteSpecified">
            <remarks/>
        </member>
        <member name="P:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_ResponseBuscarLoteControle_Result.HoraCriacaoLote">
            <remarks/>
        </member>
        <member name="P:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_ResponseBuscarLoteControle_Result.UsuarioCriacaoLote">
            <remarks/>
        </member>
        <member name="P:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_ResponseBuscarLoteControle_Result.TipoRoteiro">
            <remarks/>
        </member>
        <member name="P:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_ResponseBuscarLoteControle_Result.ChaveGrupoListaTarefas">
            <remarks/>
        </member>
        <member name="P:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_ResponseBuscarLoteControle_Result.NumeradorGrupos">
            <remarks/>
        </member>
        <member name="P:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_ResponseBuscarLoteControle_Result.OrdemProducao">
            <remarks/>
        </member>
        <member name="P:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_ResponseBuscarLoteControle_Result.RoteiroOperacoesOrdem">
            <remarks/>
        </member>
        <member name="P:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_ResponseBuscarLoteControle_Result.Material">
            <remarks/>
        </member>
        <member name="P:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_ResponseBuscarLoteControle_Result.TextoBreve">
            <remarks/>
        </member>
        <member name="P:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_ResponseBuscarLoteControle_Result.NumeroLote">
            <remarks/>
        </member>
        <member name="P:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_ResponseBuscarLoteControle_Result.Deposito">
            <remarks/>
        </member>
        <member name="P:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_ResponseBuscarLoteControle_Result.Fornecedor">
            <remarks/>
        </member>
        <member name="P:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_ResponseBuscarLoteControle_Result.QuantidadeLoteControle">
            <remarks/>
        </member>
        <member name="P:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_ResponseBuscarLoteControle_Result.UnidadeMedida">
            <remarks/>
        </member>
        <member name="P:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_ResponseBuscarLoteControle_Result.TamanhoAmostra">
            <remarks/>
        </member>
        <member name="P:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_ResponseBuscarLoteControle_Result.UnidadeMedidaAmostra">
            <remarks/>
        </member>
        <member name="P:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_ResponseBuscarLoteControle_Result.SequencialTanque">
            <remarks/>
        </member>
        <member name="P:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.DT_BuscarLoteControle_Outbound_ResponseBuscarLoteControle_Result.NumeroTanque">
            <remarks/>
        </member>
        <member name="T:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.LIMS_BuscarLoteControle_OB_SyncCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.LIMS_BuscarLoteControle_OB_SyncCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Customization.Tasks.WebServiceSAPLimsBuscarLoteControle.LIMS_BuscarLoteControle_OB_SyncCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Customization.Tasks.WorkflowsTasks.SqcFindTrendNode">
            <summary>
            Call SQC Task from Workflow
            </summary>
        </member>
        <member name="F:Customization.Tasks.WorkflowsTasks.SqcFindTrendNode.NodeType">
            <summary>
            The workflow node type this node implements
            </summary>
        </member>
        <member name="F:Customization.Tasks.WorkflowsTasks.SqcFindTrendNode.ParameterChart">
            <summary>
            Routine Parameter
            </summary>
        </member>
        <member name="F:Customization.Tasks.WorkflowsTasks.SqcFindTrendNode.ParameterChartType">
            <summary>
            The parameter chart type
            </summary>
        </member>
        <member name="F:Customization.Tasks.WorkflowsTasks.SqcFindTrendNode.ParameterTrendTable">
            <summary>
            The parameter trend table
            </summary>
        </member>
        <member name="F:Customization.Tasks.WorkflowsTasks.SqcFindTrendNode.ParameterTrendOnlyForCurrentTest">
            <summary>
            Routine Parameter
            </summary>
        </member>
        <member name="M:Customization.Tasks.WorkflowsTasks.SqcFindTrendNode.#ctor(Thermo.SampleManager.Server.Workflow.Definition.WorkflowNodeInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Customization.Tasks.WorkflowsTasks.SqcFindTrendNode"/> class.
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:Customization.Tasks.WorkflowsTasks.SqcFindTrendNode.Chart">
            <summary>
            Gets or sets the Chart Entity
            </summary>
            <value>
            The chart entity
            </value>
        </member>
        <member name="P:Customization.Tasks.WorkflowsTasks.SqcFindTrendNode.ChartType">
            <summary>
            Gets or sets the Chart Type Entity 
            </summary>
            <value>
            The chart Type entity
            </value>
        </member>
        <member name="P:Customization.Tasks.WorkflowsTasks.SqcFindTrendNode.TrendTable">
            <summary>
            Gets or sets the Chart Entity
            </summary>
            <value>
            The chart entity
            </value>
        </member>
        <member name="P:Customization.Tasks.WorkflowsTasks.SqcFindTrendNode.TrendOnlyForCurrentTest">
            <summary>
            Limit trend checking to the current test
            </summary>
        </member>
        <member name="M:Customization.Tasks.WorkflowsTasks.SqcFindTrendNode.PerformNode">
            <summary>
            Performs the workflow node activity
            </summary>
            <returns>
            true if the child nodes should be processed
            </returns>
        </member>
        <member name="M:Customization.Tasks.WorkflowsTasks.SqcFindTrendNode.AutoName">
            <summary>
            Auto Node naming.
            </summary>
        </member>
        <member name="T:Customization.Tasks.WorkspaceDashTask">
            <summary>
            Class to implement the workspace dashboard
            </summary>
        </member>
        <member name="M:Customization.Tasks.WorkspaceDashTask.MainFormCreated">
            <summary>
            Called when the <see cref="P:Thermo.SampleManager.Tasks.DefaultFormTask.MainForm" /> has been created.
            </summary>
        </member>
        <member name="M:Customization.Tasks.WorkspaceDashTask.MainFormLoaded">
            <summary>
            Called when the <see cref="P:Thermo.SampleManager.Tasks.DefaultFormTask.MainForm" /> has been loaded.
            </summary>
        </member>
        <member name="T:Thermo.SampleManager.Tasks.BackgroundTasks.TrainingRecordCheckModTask">
            <summary>
            Background task which updates the state of Training Records
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.BackgroundTasks.TrainingRecordCheckModTask.Launch">
            <summary>
            Launches this background task.
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.BackgroundTasks.TrainingRecordCheckModTask.CheckTrainedOperators(Thermo.SampleManager.Library.EntityDefinition.TrainingCourseBase,System.Text.StringBuilder@)">
            <summary>
            Checks the trained operators.
            </summary>
            <param name="trainingCourse">The training course.</param>
            <param name="mailMessage">The mail message.</param>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.BackgroundTasks.TrainingRecordCheckModTask.MailableUser(Thermo.SampleManager.Library.EntityDefinition.PersonnelBase)">
            <summary>
            Mailable user.
            </summary>
            <param name="oper">The oper.</param>
            <returns></returns>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.BackgroundTasks.TrainingRecordCheckModTask.MailResponsibleOperators">
            <summary>
            Mails the responsible operators.
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.BackgroundTasks.TrainingRecordCheckModTask.MailToUser(Thermo.SampleManager.ObjectModel.Personnel,System.String)">
            <summary>
            Mails to user.
            </summary>
            <param name="oper">The oper.</param>
            <param name="mailMessage">The mail message.</param>
        </member>
        <member name="T:Thermo.SampleManager.Tasks.AvisoStockTask">
            <summary>
            Implementation of stocks.
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.AvisoStockTask.MainFormCreated">
            <summary>
            Called when the <see cref="P:Thermo.SampleManager.Tasks.GenericLabtableTask.MainForm"/> has been created.
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.AvisoStockTask.OnPreSave">
            <summary>
            Warn the user if the units are different
            </summary>
            <returns></returns>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.AvisoStockTask.GridSupplierDetailsValidateRow(System.Object,Thermo.SampleManager.Library.ValidateEventArgs)">
            <summary>
            Grid supplier details validate row.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Thermo.SampleManager.Library.ValidateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Thermo.SampleManager.Tasks.InstrumentTask">
            <summary>
            Instrument LTE server side task
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.InstrumentTask.MainFormCreated">
            <summary>
            Called when the <see cref="P:Thermo.SampleManager.Tasks.GenericLabtableTask.MainForm"/> has been created.
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.InstrumentTask.MainFormLoaded">
            <summary>
            Called when the <see cref="P:Thermo.SampleManager.Tasks.GenericLabtableTask.MainForm"/> has been loaded.
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.InstrumentTask.InstrumentTrainedOperatorsChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the refreshing of the trained operators grid
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.InstrumentTask.PublishTrainedOperators">
            <summary>
            Publishes the trained operators.
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.InstrumentTask.SetTrainedOperatorsTitle">
            <summary>
            Sets the trained operators title.
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.InstrumentTask.EnableAvailablePrompt">
            <summary>
            Enables the available prompt.
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.InstrumentTask.EnableCalibControls">
            <summary>
            Enables / disables the calibration controls.
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.InstrumentTask.EnableServiceControls">
            <summary>
            Enables / disables the servicing controls.
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.InstrumentTask.InstrumentPropertyChanged(System.Object,Thermo.SampleManager.Common.Data.PropertyEventArgs)">
            <summary>
            Handles the PropertyChanged event of the Instrument Entity.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Thermo.SampleManager.Common.Data.PropertyEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.InstrumentTask.InstrumentInstrumentTemplateBeforeChange(System.Object,System.EventArgs)">
            <summary>
            Instrument template before change.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.InstrumentTask.GridPartsCellEditor(System.Object,Thermo.SampleManager.Library.ClientControls.CellEditorEventArgs)">
            <summary>
            Grid part cell editor.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Thermo.SampleManager.Library.ClientControls.CellEditorEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.InstrumentTask.GridPartsBeforeRowDelete(System.Object,Thermo.SampleManager.Library.ClientControls.BeforeRowDeleteEventArgs)">
            <summary>
            Grids Part before row delete.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Thermo.SampleManager.Library.ClientControls.BeforeRowDeleteEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.InstrumentTask.GridPartsBeforeRowInsert(System.Object,Thermo.SampleManager.Library.ClientControls.BeforeRowInsertedEventArgs)">
            <summary>
            Grid Part before row insert.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Thermo.SampleManager.Library.ClientControls.BeforeRowInsertedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.InstrumentTask.GridPartsBeforeRowAdd(System.Object,Thermo.SampleManager.Library.ClientControls.BeforeRowAddedEventArgs)">
            <summary>
            Grid Part before row add.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Thermo.SampleManager.Library.ClientControls.BeforeRowAddedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.InstrumentTask.PartsDialogOnNewInstrumentPartLinkInsert(Thermo.SampleManager.ObjectModel.InstrumentPartLink)">
            <summary>
            On new instrument part insert
            </summary>
            <param name="instrumentPartLink">The instrument part link.</param>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.InstrumentTask.PartsDialogOnNewInstrumentPartLinkAdd(Thermo.SampleManager.ObjectModel.InstrumentPartLink)">
            <summary>
            On new instrument part added
            </summary>
            <param name="instrumentPartLink">The instrument part link.</param>
        </member>
        <member name="T:Thermo.SampleManager.Tasks.ExtendedLocationTask">
            <summary>
            Location server side task.
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.ExtendedLocationTask.MainFormCreated">
            <summary>
            Called when the <see cref="P:Thermo.SampleManager.Tasks.GenericLabtableTask.MainForm"/> has been created.
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.ExtendedLocationTask.MainFormLoaded">
            <summary>
            Called when the <see cref="P:Thermo.SampleManager.Tasks.GenericLabtableTask.MainForm"/> has been loaded.
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.ExtendedLocationTask.OnPreSave">
            <summary>
            Called before the property sheet or wizard is saved.
            </summary>
            <returns>
            true to allow the save to continue, false to abort the save
            </returns>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.ExtendedLocationTask.SubLocationSelectionGridLoaded(System.Object,System.EventArgs)">
            <summary>
            Handles the Loaded event of the SubLocationSelectionGrid control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.ExtendedLocationTask.LocationPropertyChanged(System.Object,Thermo.SampleManager.Common.Data.PropertyEventArgs)">
            <summary>
            Handles the PropertyChanged event of the m_Location control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Thermo.SampleManager.Common.Data.PropertyEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.ExtendedLocationTask.SubLocationSelectionGridItemSelected(System.Object,Thermo.SampleManager.Library.ClientControls.SelectionGridItemEventArgs)">
            <summary>
            Handles the ItemSelected event of the SelectionGridDesign1 control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Thermo.SampleManager.Library.ClientControls.SelectionGridItemEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.ExtendedLocationTask.SubLocationSelectionGridItemDeSelected(System.Object,Thermo.SampleManager.Library.ClientControls.SelectionGridItemEventArgs)">
            <summary>
            Handles the ItemDeSelected event of the SubLocationSelectionGrid control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Thermo.SampleManager.Library.ClientControls.SelectionGridItemEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.ExtendedLocationTask.UpdateParentTreeList">
            <summary>
            Updates the parent tree list.
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.ExtendedLocationTask.UpdateParentFoundLabel">
            <summary>
            Updates the parent found label.
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.ExtendedLocationTask.UpdateAssignable">
            <summary>
            Updates the assignable.
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.ExtendedLocationTask.UpdateLocationIcon">
            <summary>
            Updates the location icon.
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.ExtendedLocationTask.UpdatePossibleParentLocationQuery">
            <summary>
            Updates the possible parent location query.
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.ExtendedLocationTask.UpdateSubLocationCollection">
            <summary>
            Updates the sub location collection.
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.ExtendedLocationTask.Remove">
            <summary>
            Remove option.
            </summary>
        </member>
        <member name="T:Thermo.SampleManager.Tasks.SQC">
            <summary>
            Generic User Prompt Task. A task which contains a collection of prompts
            and passes the values of the prompts back to the caller.
            </summary>
        </member>
        <member name="F:Thermo.SampleManager.Tasks.SQC.UserPromptForm">
            <summary>
            The default name of the prompt form
            </summary>
        </member>
        <member name="F:Thermo.SampleManager.Tasks.SQC.m_FormName">
            <summary>
            The form name of the user prompts.
            </summary>
        </member>
        <member name="F:Thermo.SampleManager.Tasks.SQC.m_PromptCaptions">
            <summary>
            List of properties needed to prompt for.
            </summary>
        </member>
        <member name="F:Thermo.SampleManager.Tasks.SQC.returnValues">
            <summary>
            An array of return values retrieved from the prompts.
            </summary>
        </member>
        <member name="F:Thermo.SampleManager.Tasks.SQC.m_Mandatory">
            <summary>
            All Prompts must be filled in
            </summary>
        </member>
        <member name="F:Thermo.SampleManager.Tasks.SQC.m_ForceValid">
            <summary>
            Promtp must be completed with a valid value
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.SQC.SetupTask">
            <summary>
            Setup the SampleManager LTE task
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.SQC.CreateUserPromptForm">
            <summary>
            Creates the form to prompt for values. If the first task paramter is specified that
            specific form is used. If empty the default template is used. The second parameter is an override
            for the form title and the remaining parameters are expected to be properties to prompt for.
            </summary>
        </member>
        <member name="P:Thermo.SampleManager.Tasks.SQC.MainForm">
            <summary>
            Gets the main form of the labtable.
            </summary>
            <value>The main form.</value>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.SQC.MainForm_Loaded(System.Object,System.EventArgs)">
            <summary>
            Handles the Loaded event of the MainForm control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.SQC.GenericUserPromptTask_EditValueChanged(System.Object,Thermo.SampleManager.Library.ClientControls.TextChangedEventArgs)">
            <summary>
            As the controls are not bound update the text values.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.SQC.TaskLoaded">
            <summary>
            Tasked Loaded method
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.SQC.form_Closing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Handles the Closing event of the form control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Thermo.SampleManager.Tasks.SQC1.UserPromptForm">
            <summary>
            The default name of the prompt form
            </summary>
        </member>
        <member name="F:Thermo.SampleManager.Tasks.SQC1.m_FormName">
            <summary>
            The form name of the user prompts.
            </summary>
        </member>
        <member name="F:Thermo.SampleManager.Tasks.SQC1.m_PromptCaptions">
            <summary>
            List of properties needed to prompt for.
            </summary>
        </member>
        <member name="F:Thermo.SampleManager.Tasks.SQC1.returnValues">
            <summary>
            An array of return values retrieved from the prompts.
            </summary>
        </member>
        <member name="F:Thermo.SampleManager.Tasks.SQC1.m_Mandatory">
            <summary>
            All Prompts must be filled in
            </summary>
        </member>
        <member name="F:Thermo.SampleManager.Tasks.SQC1.m_ForceValid">
            <summary>
            Promtp must be completed with a valid value
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.SQC1.SetupTask">
            <summary>
            Setup the SampleManager LTE task
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.SQC1.CreateUserPromptForm">
            <summary>
            Creates the form to prompt for values. If the first task paramter is specified that
            specific form is used. If empty the default template is used. The second parameter is an override
            for the form title and the remaining parameters are expected to be properties to prompt for.
            </summary>
        </member>
        <member name="P:Thermo.SampleManager.Tasks.SQC1.MainForm">
            <summary>
            Gets the main form of the labtable.
            </summary>
            <value>The main form.</value>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.SQC1.MainForm_Loaded(System.Object,System.EventArgs)">
            <summary>
            Handles the Loaded event of the MainForm control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.SQC1.GenericUserPromptTask_EditValueChanged(System.Object,Thermo.SampleManager.Library.ClientControls.TextChangedEventArgs)">
            <summary>
            As the controls are not bound update the text values.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.SQC1.TaskLoaded">
            <summary>
            Tasked Loaded method
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.SQC1.form_Closing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Handles the Closing event of the form control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Thermo.SampleManager.Tasks.SQC2.UserPromptForm">
            <summary>
            The default name of the prompt form
            </summary>
        </member>
        <member name="F:Thermo.SampleManager.Tasks.SQC2.m_FormName">
            <summary>
            The form name of the user prompts.
            </summary>
        </member>
        <member name="F:Thermo.SampleManager.Tasks.SQC2.m_PromptCaptions">
            <summary>
            List of properties needed to prompt for.
            </summary>
        </member>
        <member name="F:Thermo.SampleManager.Tasks.SQC2.returnValues">
            <summary>
            An array of return values retrieved from the prompts.
            </summary>
        </member>
        <member name="F:Thermo.SampleManager.Tasks.SQC2.m_Mandatory">
            <summary>
            All Prompts must be filled in
            </summary>
        </member>
        <member name="F:Thermo.SampleManager.Tasks.SQC2.m_ForceValid">
            <summary>
            Promtp must be completed with a valid value
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.SQC2.SetupTask">
            <summary>
            Setup the SampleManager LTE task
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.SQC2.CreateUserPromptForm">
            <summary>
            Creates the form to prompt for values. If the first task paramter is specified that
            specific form is used. If empty the default template is used. The second parameter is an override
            for the form title and the remaining parameters are expected to be properties to prompt for.
            </summary>
        </member>
        <member name="P:Thermo.SampleManager.Tasks.SQC2.MainForm">
            <summary>
            Gets the main form of the labtable.
            </summary>
            <value>The main form.</value>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.SQC2.MainForm_Loaded(System.Object,System.EventArgs)">
            <summary>
            Handles the Loaded event of the MainForm control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.SQC2.GenericUserPromptTask_EditValueChanged(System.Object,Thermo.SampleManager.Library.ClientControls.TextChangedEventArgs)">
            <summary>
            As the controls are not bound update the text values.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.SQC2.TaskLoaded">
            <summary>
            Tasked Loaded method
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.SQC2.form_Closing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Handles the Closing event of the form control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Thermo.SampleManager.Tasks.SQC3.UserPromptForm">
            <summary>
            The default name of the prompt form
            </summary>
        </member>
        <member name="F:Thermo.SampleManager.Tasks.SQC3.m_FormName">
            <summary>
            The form name of the user prompts.
            </summary>
        </member>
        <member name="F:Thermo.SampleManager.Tasks.SQC3.m_PromptCaptions">
            <summary>
            List of properties needed to prompt for.
            </summary>
        </member>
        <member name="F:Thermo.SampleManager.Tasks.SQC3.returnValues">
            <summary>
            An array of return values retrieved from the prompts.
            </summary>
        </member>
        <member name="F:Thermo.SampleManager.Tasks.SQC3.m_Mandatory">
            <summary>
            All Prompts must be filled in
            </summary>
        </member>
        <member name="F:Thermo.SampleManager.Tasks.SQC3.m_ForceValid">
            <summary>
            Promtp must be completed with a valid value
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.SQC3.SetupTask">
            <summary>
            Setup the SampleManager LTE task
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.SQC3.CreateUserPromptForm">
            <summary>
            Creates the form to prompt for values. If the first task paramter is specified that
            specific form is used. If empty the default template is used. The second parameter is an override
            for the form title and the remaining parameters are expected to be properties to prompt for.
            </summary>
        </member>
        <member name="P:Thermo.SampleManager.Tasks.SQC3.MainForm">
            <summary>
            Gets the main form of the labtable.
            </summary>
            <value>The main form.</value>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.SQC3.MainForm_Loaded(System.Object,System.EventArgs)">
            <summary>
            Handles the Loaded event of the MainForm control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.SQC3.GenericUserPromptTask_EditValueChanged(System.Object,Thermo.SampleManager.Library.ClientControls.TextChangedEventArgs)">
            <summary>
            As the controls are not bound update the text values.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.SQC3.TaskLoaded">
            <summary>
            Tasked Loaded method
            </summary>
        </member>
        <member name="M:Thermo.SampleManager.Tasks.SQC3.form_Closing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Handles the Closing event of the form control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:RainbowSky.SampleManager.Tasks.EmissionMonitoring">
            <summary>
            Class to implement the Emission Monitoring Task
            </summary>
        </member>
        <member name="M:RainbowSky.SampleManager.Tasks.EmissionMonitoring.SetupTask">
            <summary>
            Perform task setup
            </summary>
        </member>
        <member name="M:RainbowSky.SampleManager.Tasks.EmissionMonitoring.FormLoaded(System.Object,System.EventArgs)">
            <summary>
            Form loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:RainbowSky.SampleManager.Tasks.EmissionMonitoring.UpdateValues">
            <summary>
            Updates the values.
            </summary>
        </member>
        <member name="M:RainbowSky.SampleManager.Tasks.EmissionMonitoring.UpdateValue(Thermo.SampleManager.Library.ClientControls.Bubble,System.String)">
            <summary>
            Updates the value.
            </summary>
            <param name="bubble">The bubble.</param>
            <param name="samplePoint">The sample point.</param>
        </member>
        <member name="T:RainbowSky.SampleManager.Tasks.ExplorerContext">
            <summary>
            Explorer Context Task
            </summary>
        </member>
        <member name="M:RainbowSky.SampleManager.Tasks.ExplorerContext.SetupTask">
            <summary>
            Perform task setup
            </summary>
        </member>
        <member name="M:RainbowSky.SampleManager.Tasks.ExplorerContext.FormLoaded(System.Object,System.EventArgs)">
            <summary>
            Select the Data once the form has loaded
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:RainbowSky.SampleManager.Tasks.UpdateSamples">
            <summary>
            SamplePointTrend Task
            </summary>
        </member>
        <member name="M:RainbowSky.SampleManager.Tasks.UpdateSamples.MainFormLoaded">
            <summary>
            Called when the <see cref="P:Thermo.SampleManager.Tasks.DefaultFormTask.MainForm"/> has been loaded.
            </summary>
        </member>
        <member name="M:RainbowSky.SampleManager.Tasks.UpdateSamples.ExplorerGrid1_SelectionChanged(System.Object,Thermo.SampleManager.Library.ClientControls.ExplorerGridSelectionChangedEventArgs)">
            <summary>
            Handles the SelectionChanged event of the ExplorerGrid1 control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Thermo.SampleManager.Library.ClientControls.ExplorerGridSelectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:RainbowSky.SampleManager.Tasks.UpdateSamples.ButtonUpdateSample_ClickAndWait(System.Object,System.EventArgs)">
            <summary>
            Handles the ClickAndWait event of the ButtonUpdateSample control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:RainbowSky.SampleManager.Tasks.UpdateSamples.ButtonUpdateResults_ClickAndWait(System.Object,System.EventArgs)">
            <summary>
            Handles the ClickAndWait event of the ButtonUpdateResults control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:RainbowSky.SampleManager.Tasks.UpdateSamples.UpdateSamplePointClickAndWait(System.Object,System.EventArgs)">
            <summary>
            Updates the sample point click and wait.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:RainbowSky.SampleManager.Tasks.UpdateSamples.UpdateLocationClickAndWait(System.Object,System.EventArgs)">
            <summary>
            Updates the location click and wait.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Constants">
            **********************************************************************************************
            *
            * Module Name   	: Constants
            *
             Purpose         : Constantes do sistema
            *
            * Document Ref.  :     
             *
             * Author        : Leonardo Ribeiro - LRS
             *
             * (c) Copyright 2020  Interfusão.
             **********************************************************************************************
            * instructions for use: 
             *
            **********************************************************************************************
        </member>
    </members>
</doc>
